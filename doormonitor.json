[
    {
        "id": "1a2b3c4d-5e6f-7890-a1b2-c3d4e5f6a7b8",
        "type": "tab",
        "label": "Door Control Flow",
        "disabled": false,
        "info": ""
    },
    {
        "id": "2b3c4d5e-6f78-901a-b2c3-d4e5f6a7b890",
        "type": "inject",
        "z": "1a2b3c4d-5e6f-7890-a1b2-c3d4e5f6a7b8",
        "d": true,
        "name": "Simulate 4-20mA Input",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "16",
        "payloadType": "num",
        "x": 490,
        "y": 100,
        "wires": [
            [
                "3c4d5e6f-7890-1a2b-3c4d-e5f6a7b89012"
            ]
        ]
    },
    {
        "id": "3c4d5e6f-7890-1a2b-3c4d-e5f6a7b89012",
        "type": "function",
        "z": "1a2b3c4d-5e6f-7890-a1b2-c3d4e5f6a7b8",
        "name": "Scale mA to %",
        "func": "// Input: 4-20mA (or ADC 0-32767 for ADS1115), Output: 0-100%\nlet raw = msg.payload;\nlet mA;\nif (typeof raw === 'number' && raw >= 4 && raw <= 20) {\n    mA = raw; // Inject node provides direct mA\n} else {\n    mA = (raw / 32767) * (20 - 4) + 4; // Scale ADS1115 0-32767 to 4-20mA\n}\nmA = Math.max(4, Math.min(20, mA)); // Clamp to 4-20mA\nlet percentage = ((mA - 4) / (20 - 4)) * 100;\npercentage = Math.max(0, Math.min(100, percentage)); // Clamp to 0-100\nmsg.payload = percentage;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 180,
        "wires": [
            [
                "4d5e6f78-901a-2b3c-4d5e-f6a7b8901234",
                "5e6f7890-1a2b-3c4d-5e6f-a7b890123456"
            ]
        ]
    },
    {
        "id": "4d5e6f78-901a-2b3c-4d5e-f6a7b8901234",
        "type": "ui_gauge",
        "z": "1a2b3c4d-5e6f-7890-a1b2-c3d4e5f6a7b8",
        "name": "Door Percentage",
        "group": "6f78901a-2b3c-4d5e-6f78-90123456789a",
        "order": 1,
        "width": 0,
        "height": 0,
        "gtype": "gauge",
        "title": "Door Open %",
        "label": "%",
        "format": "{{value | number:1}}",
        "min": 0,
        "max": 100,
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 870,
        "y": 140,
        "wires": []
    },
    {
        "id": "5e6f7890-1a2b-3c4d-5e6f-a7b890123456",
        "type": "function",
        "z": "1a2b3c4d-5e6f-7890-a1b2-c3d4e5f6a7b8",
        "name": "Determine Door State",
        "func": "let percentage = msg.payload;\nlet state = percentage >= 1 ? 'OPEN' : 'CLOSED';\n\n// Check if state changed\nif (msg.payload !== flow.get('lastPercentage')) {\n    flow.set('lastPercentage', percentage);\n    let now = new Date();\n    let date = now.toISOString().split('T')[0]; // YYYY-MM-DD\n    let timestamp = now.toISOString().split('T')[1].split('Z')[0].slice(0, 12); // HH:MM:SS.sss\n    msg.payload = `${date}, ${timestamp}, ${state}, ${percentage.toFixed(1)}%`;\n    msg.state = state;\n    return [msg, msg]; // Output to log display and file\n} else {\n    return [null, null]; // No state change, no output\n}",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "flow.set('lastPercentage', null);",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 220,
        "wires": [
            [
                "6f78901a-2b3c-4d5e-6f78-90123456789b",
                "c4d5e6f7-8901-2a3b-4c5d-678901234567"
            ],
            [
                "7a89012b-3c4d-5e6f-7890-1234567890ab"
            ]
        ]
    },
    {
        "id": "6f78901a-2b3c-4d5e-6f78-90123456789b",
        "type": "ui_text",
        "z": "1a2b3c4d-5e6f-7890-a1b2-c3d4e5f6a7b8",
        "group": "6f78901a-2b3c-4d5e-6f78-90123456789a",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "State Log",
        "label": "Door State Log",
        "format": "{{msg.log}}",
        "layout": "col-center",
        "x": 1070,
        "y": 180,
        "wires": []
    },
    {
        "id": "7a89012b-3c4d-5e6f-7890-1234567890ab",
        "type": "file",
        "z": "1a2b3c4d-5e6f-7890-a1b2-c3d4e5f6a7b8",
        "name": "Write to log.txt",
        "filename": "log.txt",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "utf8",
        "x": 1070,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "8b90123c-4d5e-6f78-9012-34567890abcd",
        "type": "http in",
        "z": "1a2b3c4d-5e6f-7890-a1b2-c3d4e5f6a7b8",
        "name": "Download Log",
        "url": "/download-log",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 470,
        "y": 340,
        "wires": [
            [
                "9c01234d-5e6f-7890-1234-567890abcdef"
            ]
        ]
    },
    {
        "id": "9c01234d-5e6f-7890-1234-567890abcdef",
        "type": "file in",
        "z": "1a2b3c4d-5e6f-7890-a1b2-c3d4e5f6a7b8",
        "name": "Read log.txt",
        "filename": "log.txt",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": true,
        "encoding": "none",
        "x": 670,
        "y": 340,
        "wires": [
            [
                "0d12345e-6f78-9012-3456-7890abcdef01"
            ]
        ]
    },
    {
        "id": "0d12345e-6f78-9012-3456-7890abcdef01",
        "type": "http response",
        "z": "1a2b3c4d-5e6f-7890-a1b2-c3d4e5f6a7b8",
        "name": "Send Log File",
        "statusCode": "200",
        "headers": {
            "Content-Type": "text/plain",
            "Content-Disposition": "attachment; filename=\"log.txt\""
        },
        "x": 870,
        "y": 340,
        "wires": []
    },
    {
        "id": "c4d5e6f7-8901-2a3b-4c5d-678901234567",
        "type": "debug",
        "z": "1a2b3c4d-5e6f-7890-a1b2-c3d4e5f6a7b8",
        "name": "Debug Log Output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1070,
        "y": 140,
        "wires": []
    },
    {
        "id": "a8b78ef64c4b0849",
        "type": "IND 4-20mA in",
        "z": "1a2b3c4d-5e6f-7890-a1b2-c3d4e5f6a7b8",
        "name": "",
        "stack": "0",
        "channel": "1",
        "payload": "payload",
        "payloadType": "msg",
        "x": 500,
        "y": 220,
        "wires": [
            [
                "3c4d5e6f-7890-1a2b-3c4d-e5f6a7b89012"
            ]
        ]
    },
    {
        "id": "cdecf7ca5251df5e",
        "type": "inject",
        "z": "1a2b3c4d-5e6f-7890-a1b2-c3d4e5f6a7b8",
        "name": "Inject every 1 second",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 280,
        "y": 220,
        "wires": [
            [
                "a8b78ef64c4b0849"
            ]
        ]
    },
    {
        "id": "6f78901a-2b3c-4d5e-6f78-90123456789a",
        "type": "ui_group",
        "name": "Door Control Dashboard",
        "tab": "c3d4e5f6-7890-1234-5678-9012abcdef34",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "c3d4e5f6-7890-1234-5678-9012abcdef34",
        "type": "ui_tab",
        "name": "Door Control",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    }
]
